@using Newtonsoft.Json
@model IEnumerable<MyWebApp.Models.AnimeList>
@{
    ViewBag.Title = "Explore";
}

<h2>Explore</h2>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <td><strong>Title</strong></td>
            <td><strong>Type</strong></td>
            <td><strong>Episodes</strong></td>
            <td><strong>Score</strong></td>
        </tr>
    </thead>
    <tbody data-bind="foreach:currentAnimeList">
        <tr>
            <td data-bind="text:Title"></td>
            <td data-bind="text:SeriesType"></td>
            <td data-bind="text:Episodes"></td>
            <td data-bind="text:Score"></td>         
        </tr>
    </tbody>
    <tfoot>
        <tr>
            <td colspan="1">
                <span data-bind="click:previousPage,visible:currentPage() > 1" class="glyphicon glyphicon-circle-arrow-left" style="cursor:pointer;"></span>
                <span data-bind="text:currentPage"></span>
                <span data-bind="click:nextPage,visible:currentPage() < lastPage" class="glyphicon glyphicon-circle-arrow-right" style="cursor:pointer;"></span>
            </td>
        </tr>
    </tfoot>
</table>
<div>
    @Html.ActionLink("Back to List", "Index", "Home")
</div>

<script src="~/Scripts/knockout-3.3.0.js"></script>
<script>
    function StatementViewModel() {        
        var self = this;

        self.animelist = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings {ReferenceLoopHandling = ReferenceLoopHandling.Ignore }));
        self.pageSize = 5;        
        self.currentPage = ko.observable(1);
        self.lastPage = Math.ceil(self.animelist.length / self.pageSize);
        self.currentAnimeList = ko.computed(function(){
            var startIndex = (self.currentPage() - 1) * self.pageSize;
            var endIndex = startIndex + self.pageSize;                        
            return self.animelist.slice(startIndex, endIndex);
        });

        // methods
        self.nextPage = function(){
            self.currentPage(self.currentPage() + 1);
        };
        self.previousPage = function(){
            self.currentPage(self.currentPage() - 1);
        };
    };    

    ko.applyBindings(new StatementViewModel());    
</script>
