@using Newtonsoft.Json
@model IEnumerable<MyWebApp.Models.AnimeList>
@{
    ViewBag.Title = "Explore";
}
@*TODO: problem with chervron glyph scaling column*@

<h2>Explore</h2>
<div id="loader" data-request-url="@Url.Action("Details")"></div>
<div data-bind='simpleGrid: gridViewModel, simpleGridTemplate:"anime_list_template"'> </div>

<label>Number of items per page:<select data-bind="options: pageArray,value: currentPageSize"></select></label>

<button data-bind='click: jumpToFirstPage, enable: gridViewModel.currentPageIndex'>
    Jump to first page
</button>

<div>
    <button type="button" class="btn btn-default" id="clean">
        <span aria-hidden="true"></span> Clean Listings
    </button>
</div>


@section head {
    <link href="~/Styles/koGridStyle.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/messenger/messenger.css" rel="stylesheet" />
    <link href="~/Content/messenger/messenger-theme-future.css" rel="stylesheet" />
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")
    <script src="~/Scripts/myKnockoutGrid.js"></script>
    <script src="~/Scripts/messenger/messenger.min.js"></script>
    <script src="~/Scripts/messenger/messenger-theme-future.js"></script>

    <script>
        Messenger.options = {
            extraClasses: 'messenger-fixed messenger-on-bottom',
            theme: 'future'
        }
        $('#clean').click(function() {
            $.ajax({
                url: "@Url.Action("Clean")",
                type: "POST",
                success:function() {
                    location.reload();
                },
                error: function() {
                    Messenger().post("Something went wrong...");
                }
            });
            this.blur();
        });
    </script>

    <script>
        var initialData = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings {ReferenceLoopHandling = ReferenceLoopHandling.Ignore }));
        var PagedGridModel = function (items) {
            var self = this;
            this.items = ko.observableArray(items);
            this.pageArray = [5, 10, 15, 20];
            this.currentPageSize = ko.observable(5);

            this.jumpToFirstPage = function () {
                this.gridViewModel.currentPageIndex(0);
            };

            var urlAction = $('#loader').data('request-url');

            this.gridViewModel = new ko.simpleGrid.viewModel({
                data: this.items,
                columns: [
                    { headerText: "Title", rowText: "Title", sortTerm: "Title", rowImage: false, rowId: "Id", rowAction: urlAction},
                    { headerText: "Image", rowText: false, sortTerm: "ImageUrl", rowImage: "ImageUrl", rowId: false},
                    { headerText: "Type", rowText: "SeriesType", sortTerm: "SeriesType", rowImage: false, rowId: false},
                    { headerText: "Episodes", rowText: "Episodes", sortTerm: "Episodes", rowImage: false, rowId: false},
                    { headerText: "Score", rowText: "Score", sortTerm: "Score", rowImage: false, rowId: false}
                ],
                pageSize: this.currentPageSize
            });

            //TODO: May be race condition. If this is called before gridViewModel, currentPageIndex() returns old value
            this.currentPageSize.subscribe(function(newValue) {
                var itemsCanHold = (self.gridViewModel.currentPageIndex() + 1) * newValue;
                var amountItems = ko.unwrap(self.items).length;
                if(itemsCanHold > amountItems) {
                    self.gridViewModel.currentPageIndex(self.gridViewModel.maxPageIndex());
                }
            });
        };
        ko.applyBindings(new PagedGridModel(initialData));


    </script>
}
